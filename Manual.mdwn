Manual de referencia de Elene 
==========

> Elene es un lenguaje fuertemente tipeado, no orientado a objetos, que
 busca estimular la programación mediante lenguaje natural.

> Elene está diseñado para parecerse a la programación por pseudocódigo.

***

Cosas Importantes que faltan:
-----------
> Uniones y estructuras
> Pasaje por valor y referencia
> Arreglos
> Opcionales

Notas:
-----------
> YA NO --> **Todas** las funciones deben terminar con ";", incluso los bloques de instrucciones.

> La última instrucción de un bloque no lleva ";", tampoco los bloques en sí.

> Tener cuidado con las funciones que retornan vacío al ser llamadas para
  retornar, por ejemplo en `retornar Concatenar(Quicksort(Menores), Pivot,
  Quicksort(Mayores));` , hay que verificar que la función retorne algo.

Lista de palabras reservadas:
-----------
>
`   entonces
    o  
    no          
    si
    mientras
    hacer
    para
    tal
    que
    con
    cambio
    leer
    imprimir
    la     
    funcion
    recibe
    y
    retorna
    sea
    estructura
    contiene
    union
    vacio
    guacara
    entero
    caracter
    flotante
    booleano
    string
    retornar
    con
    valor
    verdadero
    falso
    es
    a
    mayor
    menor
    igual
    distinto
    de
    tipo
    funciones
    variables
    globales
`

Mecanismos soportados:
-----------
*   **Funciones (sin anidamiento)** .
*   **Arreglos unidimensionales con índice arbitrario** :



Tipos de datos:
-----------
* Entero
* Booleano
* Vacío
* Caracter
* Cadena de caracteres
* Flotante
* Arreglo

Operadores
-----------
**Operadores Aritméticos:**
* +
* -
* \*
* /

**Operadores Booleanos:**
* mayor que
* menor que
* mayor o igual que
* menor o igual que
* y
* o
* igual
* distinto
* no

** **

Preguntas para consulta
-----------

* Poner declaraciones de funciones en cualquier sitio complica mucho? (asi como las de variables)
* Afecta usar por ejemplo el token "no" para negacion booleana y para oraciones en tokes
* Llaves y paréntesis y esas cosas, deberían ir como tokens? 
* Funciones locales?? Definidas en algún alcance arbitrario.
* Bloques vacíos? Sin instrucciones o completamente vacíos.
* Los arreglos son tipos primitivos? 
* Como es lo de los arreglos? En la gramática se declara con el tipo "arreglo de entero"? 
  o se declara "arreglo" y lo demás otra cosa. Y los límites? Cómo interactúan con el nombre?
* Bloques anidados (arbitrariamente) tienen alguna complicación (parecida a la de variables declaradas
  en cualquier sitio). Es decir hacer que un bloque sea una instrucción.
* Las expresiones booleanas (en la gramática) se deben separar? Por ejemplo
  hacer una regla que diga exprBooleanaComparativa que contenga mayor que
  y menor que, por ejemplo terminoAritmetico MAYOR QUE terminoAritmetico
  y otra que sea para las expresiones booleanas? terminoBooleano Y terminoBooleano.




Sintaxis:
-----------

> Los nombres de variable deben comenzar por letra mayúscula, y las palabras
  reservadas comienzan por minúscula.

> YA ESTO NO VA, IGNORAR
  Cada programa solo tendrá un bloque principal de instrucciones, el cual
  seguirá la siguiente sintaxis: `Guacara { Instrucciones }`
  Las instrucciones pueden ser declaraciones de variables, definiciones
  de funciones, o instrucciones arbitrarias.

> Un programa en Elene tendrá un bloque de declaraciones de variables
  (posiblemente uno de funciones) y un bloque de instrucciones.

> Existirá una función principal llamada "Guacara" que debe ir obligatoriamente,
  de modo que la sintaxis sería algo como:
  Declaración de Variables Globales
  Declaración de Funciones
  Función principal.

> AUN SIN DECIDIR Las funciones pueden tener bloques vacíos, o con solamente instrucciones

> Para la sección de declaración de variables, si se especifica debe tener al menos una. 

> Los arreglos deben declararse junto a sus límites. Se incluyen ambos
  extremos, de modo que un arreglo A[3..7] tendrá 5 elementos.

> Se deben implementar las funciones antes de utilizarlas.

> Un bloque se delimita utilizando llaves `{ }`.
